[
  {
    "quid": 2000014,
    "question": "Who would wish to visit Ireland in July, the year of 2007?",
    "ground_truth": [
      "Bertie Ahern"
    ],
    "analysis": {
      "question_type": "entity_query",
      "key_entities": [
        "Ireland"
      ],
      "target_relations": [
        "wish to visit"
      ],
      "time_constraints": "2007-07",
      "answer_type": "entity",
      "query_strategy": "首先识别出关键实体'Ireland'和目标关系'wish to visit'，然后应用时间约束'2007-07'来筛选出在2007年7月有意愿访问爱尔兰的实体。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Ireland']\n        time_constraint = \"2007-07\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "Bertie Ahern"
    ],
    "evaluation": {
      "precision": 1.0,
      "recall": 1.0,
      "f1": 1.0,
      "exact_match": true,
      "intersection_count": 1
    },
    "process_time": 11.055915117263794
  },
  {
    "quid": 2000015,
    "question": "In which year did Viktor Orban visit Iran for the first time?",
    "ground_truth": [
      "2015"
    ],
    "analysis": {
      "question_type": "time_query",
      "key_entities": [
        "Viktor Orban",
        "Iran"
      ],
      "target_relations": [
        "visit"
      ],
      "time_constraints": "first time",
      "answer_type": "time",
      "query_strategy": "首先识别出关键实体'Viktor Orban'和'Iran'，以及目标关系'visit'。问题询问的是第一次访问的时间，因此需要在时序知识图谱中查询Viktor Orban访问伊朗的最早时间记录。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    try:\n        entities = ['Viktor Orban', 'Iran']\n        target_relations = ['Make_a_visit']\n        \n        results = []\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 对于\"first time\"类型的查询，需要找到特定关系的最早记录\n        if len(entities) >= 2:\n            entity1, entity2 = entities[0], entities[1]\n            \n            # 尝试多种实体名称格式\n            entity1_patterns = [entity1, entity1.replace(' ', '_'), entity1.replace('_', ' ')]\n            entity2_patterns = [entity2, entity2.replace(' ', '_'), entity2.replace('_', ' ')]\n            \n            for e1_pattern in entity1_patterns:\n                for e2_pattern in entity2_patterns:\n                    # 查找 entity1 -> relation -> entity2 的记录\n                    mask = (\n                        (df['head'].str.contains(e1_pattern, case=False, na=False)) &\n                        (df['tail'].str.contains(e2_pattern, case=False, na=False)) &\n                        (df['relation'].isin(target_relations))\n                    )\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            year = row['timestamp'][:4]\n                            results.append(year)\n        \n        # 返回最早的年份\n        if results:\n            earliest_year = min(results)\n            return [earliest_year]\n        else:\n            return []\n            \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "2015"
    ],
    "evaluation": {
      "precision": 1.0,
      "recall": 1.0,
      "f1": 1.0,
      "exact_match": true,
      "intersection_count": 1
    },
    "process_time": 11.773802280426025
  },
  {
    "quid": 2000016,
    "question": "Who made optimistic remarks about Iran after the Organisation for Economic Cooperation and Development?",
    "ground_truth": [
      "South Korea",
      "Party Member (Iraq)",
      "France",
      "China",
      "Iraq",
      "Member of Legislative (Govt) (Iran)",
      "Japan",
      "Head of Government (Ukraine)",
      "Thailand",
      "Kazakhstan"
    ],
    "analysis": {
      "question_type": "relation_query",
      "key_entities": [
        "Organisation for Economic Cooperation and Development",
        "Iran"
      ],
      "target_relations": [
        "made optimistic remarks about"
      ],
      "time_constraints": "after the Organisation for Economic Cooperation and Development",
      "answer_type": "entity",
      "query_strategy": "首先识别出关键实体'Organisation for Economic Cooperation and Development'和'Iran'，然后查找在'Organisation for Economic Cooperation and Development'之后与'Iran'有'optimistic remarks about'关系的实体。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Organisation for Economic Cooperation and Development', 'Iran']\n        time_constraint = \"after the Organisation for Economic Cooperation and Development\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [],
    "evaluation": {
      "precision": 0,
      "recall": 0.0,
      "f1": 0,
      "exact_match": false,
      "intersection_count": 0
    },
    "process_time": 9.299494981765747
  },
  {
    "quid": 2000017,
    "question": "Who made optimistic remarks about Yasuo Fukuda after Japan?",
    "ground_truth": [
      "Government Official (Japan)",
      "China"
    ],
    "analysis": {
      "question_type": "relation_query",
      "key_entities": [
        "Yasuo Fukuda",
        "Japan"
      ],
      "target_relations": [
        "made optimistic remarks about"
      ],
      "time_constraints": "after Japan",
      "answer_type": "entity",
      "query_strategy": "首先识别出关键实体'Yasuo Fukuda'和'Japan'，然后提取目标关系'made optimistic remarks about'，时间约束是'after Japan'，需要查询在Japan之后对Yasuo Fukuda发表乐观言论的实体。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Yasuo Fukuda', 'Japan']\n        time_constraint = \"after Japan\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "China",
      "Dmitry Anatolyevich Medvedev",
      "Japan",
      "Vietnam",
      "South Korea",
      "Lee Myung Bak",
      "France",
      "Ireland",
      "South Africa",
      "Roh Moo Hyun",
      "Wen Jiabao",
      "Member of Legislative (Govt) (South Korea)",
      "Head of Government (South Korea)",
      "Tony Blair",
      "Chongwadai",
      "Janez Jansa",
      "Jian Yu",
      "Abdullah Gül",
      "Jakaya Mrisho Kikwete"
    ],
    "evaluation": {
      "precision": 0.05263157894736842,
      "recall": 0.5,
      "f1": 0.09523809523809525,
      "exact_match": false,
      "intersection_count": 1
    },
    "process_time": 9.642759799957275
  },
  {
    "quid": 2000018,
    "question": "In which month did Xi Jinping praise the Bahamas?",
    "ground_truth": [
      "2015-01"
    ],
    "analysis": {
      "question_type": "time_query",
      "key_entities": [
        "Xi Jinping",
        "the Bahamas"
      ],
      "target_relations": [
        "praise"
      ],
      "time_constraints": "",
      "answer_type": "time",
      "query_strategy": "首先识别出关键实体'Xi Jinping'和'the Bahamas'，以及目标关系'praise'。问题询问的是这一事件发生的月份，因此需要在时序知识图谱中查询'Xi Jinping'与'the Bahamas'之间存在'praise'关系的具体时间，并提取出月份信息作为答案。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    try:\n        entities = ['Xi Jinping', 'the Bahamas']\n        target_relations = ['Make_a_visit']\n        \n        results = []\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 对于\"first time\"类型的查询，需要找到特定关系的最早记录\n        if len(entities) >= 2:\n            entity1, entity2 = entities[0], entities[1]\n            \n            # 尝试多种实体名称格式\n            entity1_patterns = [entity1, entity1.replace(' ', '_'), entity1.replace('_', ' ')]\n            entity2_patterns = [entity2, entity2.replace(' ', '_'), entity2.replace('_', ' ')]\n            \n            for e1_pattern in entity1_patterns:\n                for e2_pattern in entity2_patterns:\n                    # 查找 entity1 -> relation -> entity2 的记录\n                    mask = (\n                        (df['head'].str.contains(e1_pattern, case=False, na=False)) &\n                        (df['tail'].str.contains(e2_pattern, case=False, na=False)) &\n                        (df['relation'].isin(target_relations))\n                    )\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            year = row['timestamp'][:4]\n                            results.append(year)\n        \n        # 返回最早的年份\n        if results:\n            earliest_year = min(results)\n            return [earliest_year]\n        else:\n            return []\n            \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [],
    "evaluation": {
      "precision": 0,
      "recall": 0.0,
      "f1": 0,
      "exact_match": false,
      "intersection_count": 0
    },
    "process_time": 12.075056791305542
  },
  {
    "quid": 2000019,
    "question": "When did Iran last express its intention to meet with international governmental organisations?",
    "ground_truth": [
      "2006-05-27"
    ],
    "analysis": {
      "question_type": "time_query",
      "key_entities": [
        "Iran",
        "international governmental organisations"
      ],
      "target_relations": [
        "express intention to meet"
      ],
      "time_constraints": "last",
      "answer_type": "time",
      "query_strategy": "查询策略应首先定位实体'Iran'和'international governmental organisations'之间的关系'express intention to meet'，然后筛选出最近的时间点作为答案。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    try:\n        entities = ['Iran', 'international governmental organisations']\n        target_relations = ['Make_a_visit']\n        \n        results = []\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 对于\"first time\"类型的查询，需要找到特定关系的最早记录\n        if len(entities) >= 2:\n            entity1, entity2 = entities[0], entities[1]\n            \n            # 尝试多种实体名称格式\n            entity1_patterns = [entity1, entity1.replace(' ', '_'), entity1.replace('_', ' ')]\n            entity2_patterns = [entity2, entity2.replace(' ', '_'), entity2.replace('_', ' ')]\n            \n            for e1_pattern in entity1_patterns:\n                for e2_pattern in entity2_patterns:\n                    # 查找 entity1 -> relation -> entity2 的记录\n                    mask = (\n                        (df['head'].str.contains(e1_pattern, case=False, na=False)) &\n                        (df['tail'].str.contains(e2_pattern, case=False, na=False)) &\n                        (df['relation'].isin(target_relations))\n                    )\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            year = row['timestamp'][:4]\n                            results.append(year)\n        \n        # 返回最早的年份\n        if results:\n            earliest_year = min(results)\n            return [earliest_year]\n        else:\n            return []\n            \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [],
    "evaluation": {
      "precision": 0,
      "recall": 0.0,
      "f1": 0,
      "exact_match": false,
      "intersection_count": 0
    },
    "process_time": 10.808257818222046
  },
  {
    "quid": 2000020,
    "question": "In which country did Colombia release people before 23 February 2008?",
    "ground_truth": [
      "Guerrilla (Colombia)"
    ],
    "analysis": {
      "question_type": "entity_query",
      "key_entities": [
        "Colombia"
      ],
      "target_relations": [
        "release people"
      ],
      "time_constraints": "before 23 February 2008",
      "answer_type": "entity",
      "query_strategy": "首先识别出关键实体'Colombia'和目标关系'release people'，然后应用时间约束'before 23 February 2008'来筛选符合条件的国家。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Colombia']\n        time_constraint = \"before 23 February 2008\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "Armed Band (Spain)",
      "Head of Government (Peru)",
      "Jaroslav Palas",
      "Rodrigo Rato",
      "Party Member (Brazil)",
      "Associated Press",
      "Daniel Scioli",
      "Terrorist (Irish Republican Army)",
      "Alberto Gonzales",
      "José Miguel Insulza",
      "Military (Guatemala)",
      "Ireland",
      "Pervez Musharraf",
      "Head of Government (Brazil)",
      "Foreign Affairs (France)",
      "Evo Morales",
      "France",
      "Jorge Briz Abularach",
      "Sher Bahadur Deuba",
      "Media Personnel (International)",
      "Head of Government (Cuba)",
      "Nonaligned Movement",
      "Mwai Kibaki",
      "Manuel Rosales",
      "Álvaro García",
      "Bolivia",
      "Rafael Correa",
      "Peter Pace",
      "Mexico",
      "National Action Party",
      "Congress (United States)",
      "Government (Ecuador)",
      "Head of Government (Germany)",
      "Royal Administration (Spain)",
      "Sérgio de Oliveira Cabral Santos Filho",
      "China",
      "Al Gore",
      "Dominican Republic",
      "Ministry (Venezuela)",
      "Alvaro Leyva",
      "Mahmoud Ahmadinejad",
      "Iran",
      "Embraer",
      "Raúl Castro",
      "Marco Aurélio Garcia",
      "Cabinet / Council of Ministers / Advisors (United States)",
      "Foreign Affairs (Venezuela)",
      "Fernando Berrocal",
      "Ingrid Betancourt Pulecio",
      "Bill Richardson",
      "Oscar Ortiz",
      "Nelson Azevedo Jobim",
      "Angela Merkel",
      "Javier Solana",
      "Government (Germany)",
      "Military (Ecuador)",
      "Barack Obama",
      "Xi Jinping",
      "Diego Borja",
      "Philip Alston",
      "Carlos M. Hernández López",
      "Special Rapporteurs of the United Nations",
      "Gustavo Márquez",
      "Grand National Party",
      "Foreign Affairs (Italy)",
      "Wu Aiying",
      "María Ángela Holguín",
      "Abdullah Gül",
      "Lawyer/Attorney (United States)",
      "Rodrigo Rivera Salazar",
      "Walid Makled",
      "Military Personnel (Peru)",
      "Mahmoud Abbas",
      "Wendy Sherman",
      "UN Security Council",
      "Head of Government (Chile)",
      "Portia Simpson Miller",
      "Cristina Fernández de Kirchner",
      "Lee Myung Bak",
      "Head of Government (South Korea)",
      "Christine Lagarde",
      "Head of Government (Guatemala)",
      "Agence France-Presse",
      "World Organization Against Torture",
      "John Dramani Mahama",
      "Human Rights Watch",
      "Juan Carlos Pinzon",
      "Alan Purisima",
      "Andrej Kiska",
      "Chuck Hagel",
      "Ruben Dario Alzate",
      "Zhang Dejiang",
      "Governor General (Canada)",
      "Ted Poe",
      "Leopoldo López",
      "Vietnam",
      "High Commission for Refugees",
      "Foreign Affairs (Argentina)",
      "Luis de Almagro",
      "Loretta Lynch",
      "Majid Takht Ravanchi",
      "Japan",
      "South Africa",
      "Guatemala",
      "Daniel Ortega",
      "Benedict XVI",
      "Citizen (Brazil)",
      "Office of the United Nations High Commissioner for Human Rights",
      "Solomon Passy",
      "Cyril Svoboda",
      "Colombia",
      "Camilo Reyes Rodríguez",
      "Head of Government (Colombia)",
      "National Liberation Army",
      "Domestic Affairs (Colombia)",
      "Member of Legislative (Govt) (South Korea)",
      "Guerrilla (Cuba)",
      "Citizen (Venezuela)",
      "Mario Uribe Escobar",
      "Citizen (International)",
      "Government (France)",
      "Middle East",
      "Sander Levin",
      "Lawmaker (Colombia)",
      "South Korea",
      "Gabriel Silva Luján",
      "Citizen (Australia)",
      "Liu Yandong",
      "Ronald Kirk",
      "Police (Indonesia)",
      "Attorney General (Ecuador)",
      "Envoy (France)",
      "Media Personnel (Colombia)",
      "Chongwadai",
      "Elmar Mammadyarov",
      "Guerrilla (Colombia)",
      "Chen Deming",
      "Yoani Sánchez",
      "Head of Government (Qatar)",
      "Head of Government (Uruguay)",
      "Indigenous People (Taiwan)",
      "Benjamin Netanyahu",
      "Defense / Security Ministry (Colombia)",
      "Rafael Ramírez",
      "Heraldo Muñoz"
    ],
    "evaluation": {
      "precision": 0.006896551724137931,
      "recall": 1.0,
      "f1": 0.0136986301369863,
      "exact_match": false,
      "intersection_count": 1
    },
    "process_time": 9.288556337356567
  },
  {
    "quid": 2000021,
    "question": "Who was the first country to express optimism about Barack Obama after Ireland?",
    "ground_truth": [
      "Angela Merkel"
    ],
    "analysis": {
      "question_type": "entity_query",
      "key_entities": [
        "Ireland",
        "Barack Obama"
      ],
      "target_relations": [
        "express optimism about"
      ],
      "time_constraints": "after Ireland",
      "answer_type": "entity",
      "query_strategy": "首先找到Ireland对Barack Obama表达乐观态度的具体时间点，然后查询在该时间点之后，第一个对Barack Obama表达乐观态度的国家。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Ireland', 'Barack Obama']\n        time_constraint = \"after Ireland\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "Wen Jiabao",
      "Emperor Akihito",
      "Japan",
      "Media Personnel (Japan)",
      "Congress (United States)",
      "Bertie Ahern",
      "Elizabeth II",
      "USS Nimitz",
      "Tony Blair",
      "Borys Tarasyuk",
      "Naval (United Kingdom)",
      "Ma Ying Jeou",
      "Head of Government (Greece)",
      "John O'Donoghue",
      "Activist (United States)",
      "Anna Fotyga",
      "News Editor (Israel)",
      "City Mayor (United States)",
      "Harald V",
      "Tourist (United States)",
      "Yegor Timurovich Gaidar",
      "Ivan Gasparovic",
      "United Arab Emirates",
      "Student (Switzerland)",
      "Ian Paisley",
      "Valdas Adamkus",
      "Angela Merkel",
      "Toomas Hendrik Ilves",
      "Yasuo Fukuda",
      "Mwai Kibaki",
      "Businessperson (United Kingdom)",
      "Foreign Affairs (France)",
      "France",
      "Mahmoud Abbas",
      "Kemal Unakitan",
      "Barack Obama",
      "Dmitry Nikolayevich Kozak",
      "Vietnam",
      "Tran Van Tuan",
      "Charles Haughey",
      "Abdul Kalam",
      "Moro Islamic Liberation Front",
      "Detainee (United States)",
      "Cabinet / Council of Ministers / Advisors (United States)",
      "John Gormley",
      "Bolivia",
      "John Paul II",
      "Grigol Vashadze",
      "Citizen (Australia)",
      "China",
      "Scientist (France)",
      "International Monetary Fund",
      "Royal Administration (Ireland)",
      "Nabil Shaath",
      "Benedict XVI",
      "Xi Jinping",
      "Media Personnel (International)",
      "Irakli Alasania",
      "Foreign Affairs (Romania)",
      "Deval Patrick",
      "Jerry Brown",
      "Daniel Ortega",
      "European Central Bank",
      "Alexis Tsipras",
      "Iran",
      "Northern Ireland",
      "David Narmania",
      "Joan Burton",
      "Dzintars Rasnacs",
      "Joachim Gauck",
      "Arseniy Yatsenyuk",
      "Head of Government (India)",
      "South Korea",
      "Colombia",
      "Iraq",
      "Ethiopia",
      "Romania",
      "South Africa",
      "Luka Bebic",
      "Sudan",
      "Laos",
      "Ireland",
      "Citizen (United Kingdom)",
      "Dominican Republic",
      "Presidential Family (Ireland)",
      "Kuomintang",
      "Zurab Nogaideli",
      "Party Member (Ireland)",
      "Women (Ukraine)",
      "Al Gore",
      "Mexico",
      "Ministry (Sudan)",
      "Treasury/Finance Ministry (Germany)",
      "Elmar Mammadyarov",
      "Herman Van Rompuy",
      "Christine Lagarde",
      "Antonis Samaras"
    ],
    "evaluation": {
      "precision": 0.010309278350515464,
      "recall": 1.0,
      "f1": 0.020408163265306124,
      "exact_match": false,
      "intersection_count": 1
    },
    "process_time": 9.61880874633789
  },
  {
    "quid": 2000022,
    "question": "Which was the first country to praise Colombia after Cristina Fernández de Kirchner?",
    "ground_truth": [
      "Barack Obama"
    ],
    "analysis": {
      "question_type": "relation_query",
      "key_entities": [
        "Colombia",
        "Cristina Fernández de Kirchner"
      ],
      "target_relations": [
        "praise"
      ],
      "time_constraints": "after Cirstina Fernández de Kirchner",
      "answer_type": "entity",
      "query_strategy": "1. Identify the time when Cristina Fernández de Kirchner was active. 2. Find the first country that praised Colombia after that time."
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Colombia', 'Cristina Fernández de Kirchner']\n        time_constraint = \"after Cirstina Fernández de Kirchner\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "Armed Band (Spain)",
      "Head of Government (Peru)",
      "Jaroslav Palas",
      "Rodrigo Rato",
      "Party Member (Brazil)",
      "Associated Press",
      "Daniel Scioli",
      "Terrorist (Irish Republican Army)",
      "Alberto Gonzales",
      "José Miguel Insulza",
      "Military (Guatemala)",
      "Ireland",
      "Pervez Musharraf",
      "Head of Government (Brazil)",
      "Foreign Affairs (France)",
      "Evo Morales",
      "France",
      "Jorge Briz Abularach",
      "Sher Bahadur Deuba",
      "Media Personnel (International)",
      "Head of Government (Cuba)",
      "Nonaligned Movement",
      "Mwai Kibaki",
      "Manuel Rosales",
      "Álvaro García",
      "Bolivia",
      "Rafael Correa",
      "Peter Pace",
      "Mexico",
      "National Action Party",
      "Congress (United States)",
      "Government (Ecuador)",
      "Head of Government (Germany)",
      "Royal Administration (Spain)",
      "Sérgio de Oliveira Cabral Santos Filho",
      "China",
      "Al Gore",
      "Dominican Republic",
      "Ministry (Venezuela)",
      "Alvaro Leyva",
      "Mahmoud Ahmadinejad",
      "Iran",
      "Embraer",
      "Raúl Castro",
      "Marco Aurélio Garcia",
      "Cabinet / Council of Ministers / Advisors (United States)",
      "Foreign Affairs (Venezuela)",
      "Fernando Berrocal",
      "Ingrid Betancourt Pulecio",
      "Bill Richardson",
      "Oscar Ortiz",
      "Nelson Azevedo Jobim",
      "Angela Merkel",
      "Javier Solana",
      "Government (Germany)",
      "Military (Ecuador)",
      "Barack Obama",
      "Xi Jinping",
      "Diego Borja",
      "Philip Alston",
      "Carlos M. Hernández López",
      "Special Rapporteurs of the United Nations",
      "Gustavo Márquez",
      "Grand National Party",
      "Foreign Affairs (Italy)",
      "Wu Aiying",
      "María Ángela Holguín",
      "Abdullah Gül",
      "Lawyer/Attorney (United States)",
      "Rodrigo Rivera Salazar",
      "Walid Makled",
      "Military Personnel (Peru)",
      "Mahmoud Abbas",
      "Wendy Sherman",
      "UN Security Council",
      "Head of Government (Chile)",
      "Portia Simpson Miller",
      "Cristina Fernández de Kirchner",
      "Lee Myung Bak",
      "Head of Government (South Korea)",
      "Christine Lagarde",
      "Head of Government (Guatemala)",
      "Agence France-Presse",
      "World Organization Against Torture",
      "John Dramani Mahama",
      "Human Rights Watch",
      "Juan Carlos Pinzon",
      "Alan Purisima",
      "Andrej Kiska",
      "Chuck Hagel",
      "Ruben Dario Alzate",
      "Zhang Dejiang",
      "Governor General (Canada)",
      "Ted Poe",
      "Leopoldo López",
      "Vietnam",
      "High Commission for Refugees",
      "Foreign Affairs (Argentina)",
      "Luis de Almagro",
      "Loretta Lynch",
      "Majid Takht Ravanchi",
      "Japan",
      "South Africa",
      "Guatemala",
      "Daniel Ortega",
      "Benedict XVI",
      "Citizen (Brazil)",
      "Office of the United Nations High Commissioner for Human Rights",
      "Solomon Passy",
      "Cyril Svoboda",
      "Colombia",
      "Camilo Reyes Rodríguez",
      "Head of Government (Colombia)",
      "National Liberation Army",
      "Domestic Affairs (Colombia)",
      "Member of Legislative (Govt) (South Korea)",
      "Guerrilla (Cuba)",
      "Citizen (Venezuela)",
      "Mario Uribe Escobar",
      "Citizen (International)",
      "Government (France)",
      "Middle East",
      "Sander Levin",
      "Lawmaker (Colombia)",
      "South Korea",
      "Gabriel Silva Luján",
      "Citizen (Australia)",
      "Liu Yandong",
      "Ronald Kirk",
      "Police (Indonesia)",
      "Attorney General (Ecuador)",
      "Envoy (France)",
      "Media Personnel (Colombia)",
      "Chongwadai",
      "Elmar Mammadyarov",
      "Guerrilla (Colombia)",
      "Chen Deming",
      "Yoani Sánchez",
      "Head of Government (Qatar)",
      "Head of Government (Uruguay)",
      "Indigenous People (Taiwan)",
      "Benjamin Netanyahu",
      "Defense / Security Ministry (Colombia)",
      "Rafael Ramírez",
      "Heraldo Muñoz"
    ],
    "evaluation": {
      "precision": 0.006896551724137931,
      "recall": 1.0,
      "f1": 0.0136986301369863,
      "exact_match": false,
      "intersection_count": 1
    },
    "process_time": 9.683708906173706
  },
  {
    "quid": 2000023,
    "question": "Which country hosted the visit of Frank Bainimarama after Vanuatu?",
    "ground_truth": [
      "China"
    ],
    "analysis": {
      "question_type": "relation_query",
      "key_entities": [
        "Frank Bainimarama",
        "Vanuatu"
      ],
      "target_relations": [
        "hosted the visit"
      ],
      "time_constraints": "after Vanuatu",
      "answer_type": "entity",
      "query_strategy": "首先确定Frank Bainimarama在访问Vanuatu之后访问的国家，需要查询时序知识图谱中Frank Bainimarama的访问记录，并按时间顺序筛选出在Vanuatu之后的访问记录，然后提取访问的国家信息。"
    },
    "generated_code": "def query_kg(df):\n    import pandas as pd\n    import re\n    from datetime import datetime\n    \n    try:\n        results = []\n        entities = ['Frank Bainimarama', 'Vanuatu']\n        time_constraint = \"after Vanuatu\"\n        target_relations = ['Make_a_visit', 'Host_a_visit', 'Express_intent_to_meet_or_negotiate']\n        \n        # 处理时间约束\n        time_filter = None\n        if time_constraint:\n            if len(time_constraint) == 4:  # 年份\n                time_filter = time_constraint\n            elif len(time_constraint) == 7:  # 年-月\n                time_filter = time_constraint\n            elif len(time_constraint) == 10:  # 年-月-日\n                time_filter = time_constraint\n        \n        # 确保所有列都是字符串类型\n        for col in ['head', 'relation', 'tail', 'timestamp']:\n            if col in df.columns:\n                df[col] = df[col].astype(str)\n        \n        # 查找相关记录\n        if entities:\n            target_entity = entities[0]  # Ireland\n            \n            # 尝试多种实体名称格式\n            entity_patterns = [target_entity, target_entity.replace(' ', '_'), target_entity.replace('_', ' ')]\n            \n            for entity_pattern in entity_patterns:\n                # 查找 X -> relation -> target_entity 的记录（谁想访问Ireland）\n                for relation in target_relations:\n                    mask = (\n                        (df['tail'].str.contains(entity_pattern, case=False, na=False)) &\n                        (df['relation'] == relation)\n                    )\n                    \n                    # 应用时间过滤\n                    if time_filter and mask.any():\n                        mask = mask & (df['timestamp'].str.startswith(time_filter, na=False))\n                    \n                    if mask.any():\n                        filtered_df = df[mask]\n                        for _, row in filtered_df.iterrows():\n                            # 提取访问者\n                            visitor = row['head']\n                            # 清理实体名称\n                            visitor = visitor.replace('_', ' ')\n                            if visitor not in results:\n                                results.append(visitor)\n        \n        return results if results else []\n        \n    except Exception as e:\n        return [f\"查询错误: {str(e)}\"]",
    "predicted_answer": [
      "Middle East",
      "Congress (United States)",
      "South Korea",
      "United Arab Emirates",
      "Vanuatu",
      "China",
      "Prime Minister Qarase",
      "Winston Peters",
      "Government Official (Fiji)",
      "Julie Bishop",
      "Xi Jinping"
    ],
    "evaluation": {
      "precision": 0.09090909090909091,
      "recall": 1.0,
      "f1": 0.16666666666666669,
      "exact_match": false,
      "intersection_count": 1
    },
    "process_time": 9.908650636672974
  }
]